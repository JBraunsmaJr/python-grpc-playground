# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import file_transfers_pb2 as file__transfers__pb2


class TransferServiceStub(object):
    """
    As a server, enable clients to transmit a file
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Transfer = channel.stream_unary(
                '/TransferService/Transfer',
                request_serializer=file__transfers__pb2.FileChunk.SerializeToString,
                response_deserializer=file__transfers__pb2.TransferResponse.FromString,
                )


class TransferServiceServicer(object):
    """
    As a server, enable clients to transmit a file
    """

    def Transfer(self, request_iterator, context):
        """Transfer a file to server
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TransferServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Transfer': grpc.stream_unary_rpc_method_handler(
                    servicer.Transfer,
                    request_deserializer=file__transfers__pb2.FileChunk.FromString,
                    response_serializer=file__transfers__pb2.TransferResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'TransferService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TransferService(object):
    """
    As a server, enable clients to transmit a file
    """

    @staticmethod
    def Transfer(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/TransferService/Transfer',
            file__transfers__pb2.FileChunk.SerializeToString,
            file__transfers__pb2.TransferResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
